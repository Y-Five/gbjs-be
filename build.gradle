plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'com.diffplug.spotless' version "${spotlessVersion}"
}
ext {
    springAiVersion = "1.0.1"
}

group = "${appGroup}"
version = "${appVersion}"

java {
    sourceCompatibility = "${javaVersion}"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.data:spring-data-redis'

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation 'org.springframework.ai:spring-ai-starter-vector-store-qdrant'
    implementation 'org.springframework.ai:spring-ai-starter-model-openai'
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // Springdoc OpenAPI
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly "com.mysql:mysql-connector-j:${mysqlVersion}"
    runtimeOnly "com.h2database:h2:${h2Version}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // AWS S3
    implementation "org.springframework.cloud:spring-cloud-starter-aws:${s3Version}"

    // Google TTS
    implementation "com.google.cloud:google-cloud-texttospeech:${ttsVersion}"

    // Spring AI
    implementation "org.springframework.ai:spring-ai-starter-model-openai:${springAiVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

// Spotless 설정
spotless {
    java {
        // 구글 자바 코드 스타일 적용
        googleJavaFormat()

        // 라이선스 헤더 추가
        licenseHeader '/* \n * Copyright (c) 2025 YFIVE\n */'

        // 특정 import 순서 지정
        importOrder('java', 'javax', 'jakarta', 'org', 'com', '')

        // 사용하지 않는 import 제거
        removeUnusedImports()

        // 줄바꿈 통일
        endWithNewline()

        // 들여쓰기에 탭 대신 스페이스 사용
        indentWithSpaces(4)

        // 줄 끝 공백 제거
        trimTrailingWhitespace()
    }
}

// 자동 포맷팅을 위한 태스크 추가
tasks.register('formatAll') {
    dependsOn 'spotlessApply'
    group = 'formatting'
    description = '모든 소스 코드 자동 포맷팅'
}

def springProfile = project.findProperty("spring.profiles.active") ?: ""
dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:$springAiVersion"
        mavenBom "io.grpc:grpc-bom:1.61.1"
    }
}

// 빌드 전에 자동으로 포맷팅 적용
if (springProfile != "test") {
    tasks.named('compileJava') {
        dependsOn 'spotlessApply'
    }
}

// 커밋 전 검사를 위한 태스크
tasks.register('preCommitCheck') {
    dependsOn 'spotlessCheck'
    group = 'verification'
    description = '커밋 전 코드 스타일 검사'
}
